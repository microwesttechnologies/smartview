// Mapa de propiedades donde cada propiedad CSS se asocia a un alias y una lista de valores posibles.
$properties-map: (
  display: (
    values: (
      flex,
      block,
      grid,
      none,
    ),
  ),
  justify-content: (
    values: (
      space-between,
      space-around,
      flex-start,
      flex-end,
      center,
    ),
  ),
  align-items: (
    values: (
      space-between,
      space-around,
      flex-start,
      flex-end,
      center,
    ),
  ),
  flex-direction: (
    values: (
      column-reverse,
      row-reverse,
      column,
      row,
    ),
  ),
  text-align: (
    values: (
      left,
      center,
      right,
    ),
  ),
  text-overflow: (
    values: (
      ellipsis,
    ),
  ),
  white-space: (
    values: (
      nowrap,
    ),
  ),
  float: (
    values: (
      right,
    ),
  ),
  height: (
    values: (
      100%,
      75%,
      50%,
      25%,
      100vh,
      fit-content,
    ),
  ),
  width: (
    values: (
      100%,
      75%,
      50%,
      25%,
      100vh,
      fit-content,
    ),
  ),
  overflow: (
    values: (
      auto,
      hidden,
    ),
  ),
  overflow-x: (
    values: (
      auto,
      hidden,
    ),
  ),
  overflow-y: (
    values: (
      auto,
      hidden,
    ),
  ),
  border-radius: (
    values: (
      100%,
    ),
  ),
  word-break: (
    values: (
      break-all,
    ),
  ),
  cursor: (
    values: (
      pointer,
    ),
  ),
);

// Mixin para generar una clase específica con el nombre de clase, propiedad CSS y valor proporcionados.
// Parámetros:
// - $class-prefix: El nombre de la clase CSS que se va a generar.
// - $property: La propiedad CSS que se va a aplicar en la clase.
// - $value: El valor de la propiedad CSS que se va a aplicar.
@mixin generate-specific-class($class-prefix, $property, $value) {
  $normalized-value: normalize-class-name(
    $value
  ); // Limpia y convierte el valor
  .#{$class-prefix}-#{$normalized-value} {
    // Aplica la propiedad CSS ($property) con el valor ($value) en la clase generada.
    #{$property}: $value;

    &-important {
      #{$property}: $value !important;
    }
  }
}

// Mixin para iterar sobre el mapa de propiedades y generar clases CSS para cada combinación de propiedad y valor.
// No recibe parámetros directamente, pero utiliza el mapa de propiedades ($properties-map) definido globalmente.
@mixin generate-properties-classes() {
  // Itera sobre cada par ($properties-map) en el mapa de propiedades.
  @each $property, $data in $properties-map {
    // Obtiene el alias ($alias) asociado a la propiedad actual ($property).
    $alias: map-get($data, alias);
    // Obtiene la lista de valores ($values) asociados a la propiedad actual.
    $values: map-get($data, values);

    // Determina el prefijo para el nombre de la clase (alias o propiedad)
    $class-prefix: if($alias, $alias, $property);

    // Itera sobre cada valor ($value) en la lista de valores.
    @each $value in $values {
      // Llama al mixin generate-specific-class con el alias y el valor actual para generar la clase correspondiente.
      // Parámetros:
      // - $class-prefix: El nombre de la clase CSS a generar.
      // - $property: La propiedad CSS que se va a aplicar.
      // - $value: El valor de la propiedad CSS que se va a aplicar.
      @include generate-specific-class($class-prefix, $property, $value);
    }
  }
}
